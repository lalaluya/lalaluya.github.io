<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Auto Layout、Core Graphics</title>
    <link href="/2024/03/20/Auto-Layout-Core-Graphics/"/>
    <url>/2024/03/20/Auto-Layout-Core-Graphics/</url>
    
    <content type="html"><![CDATA[<h1 id="Auto-Layout-与-Core-Graphics-技术详解"><a href="#Auto-Layout-与-Core-Graphics-技术详解" class="headerlink" title="Auto Layout 与 Core Graphics 技术详解"></a>Auto Layout 与 Core Graphics 技术详解</h1><h2 id="1-Auto-Layout-基础"><a href="#1-Auto-Layout-基础" class="headerlink" title="1. Auto Layout 基础"></a>1. Auto Layout 基础</h2><h3 id="1-1-约束（Constraints）基础"><a href="#1-1-约束（Constraints）基础" class="headerlink" title="1.1 约束（Constraints）基础"></a>1.1 约束（Constraints）基础</h3><ul><li><strong>代码方式创建约束</strong><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 使用 NSLayoutConstraint</span><br><span class="hljs-built_in">NSLayoutConstraint</span> *constraint = [<span class="hljs-built_in">NSLayoutConstraint</span> <br>    constraintWithItem:view1<br>    attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span><br>    relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span><br>    toItem:view2<br>    attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span><br>    multiplier:<span class="hljs-number">1.0</span><br>    constant:<span class="hljs-number">20.0</span>];<br>[superview addConstraint:constraint];<br><br><span class="hljs-comment">// 使用 Visual Format Language (VFL)</span><br><span class="hljs-built_in">NSDictionary</span> *views = @&#123;<span class="hljs-string">@&quot;view1&quot;</span>: view1, <span class="hljs-string">@&quot;view2&quot;</span>: view2&#125;;<br>[superview addConstraints:[<span class="hljs-built_in">NSLayoutConstraint</span> <br>    constraintsWithVisualFormat:<span class="hljs-string">@&quot;H:|-[view1]-[view2]-|&quot;</span><br>    options:<span class="hljs-number">0</span> metrics:<span class="hljs-literal">nil</span> views:views]];<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-Auto-Layout-动画"><a href="#1-2-Auto-Layout-动画" class="headerlink" title="1.2 Auto Layout 动画"></a>1.2 Auto Layout 动画</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objc">[<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.3</span> animations:^&#123;<br>    constraint.constant = newValue;<br>    [view layoutIfNeeded];<br>&#125;];<br></code></pre></td></tr></table></figure><h3 id="1-3-Safe-Area-和布局指南"><a href="#1-3-Safe-Area-和布局指南" class="headerlink" title="1.3 Safe Area 和布局指南"></a>1.3 Safe Area 和布局指南</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// iOS 11+ Safe Area</span><br>view.safeAreaLayoutGuide.topAnchor<br>view.safeAreaLayoutGuide.bottomAnchor<br>view.safeAreaLayoutGuide.leadingAnchor<br>view.safeAreaLayoutGuide.trailingAnchor<br></code></pre></td></tr></table></figure><h2 id="2-Core-Graphics-绘图"><a href="#2-Core-Graphics-绘图" class="headerlink" title="2. Core Graphics 绘图"></a>2. Core Graphics 绘图</h2><h3 id="2-1-基本绘图操作"><a href="#2-1-基本绘图操作" class="headerlink" title="2.1 基本绘图操作"></a>2.1 基本绘图操作</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objc">- (<span class="hljs-type">void</span>)drawRect:(<span class="hljs-built_in">CGRect</span>)rect &#123;<br>    <span class="hljs-built_in">CGContextRef</span> context = <span class="hljs-built_in">UIGraphicsGetCurrentContext</span>();<br>    <br>    <span class="hljs-comment">// 设置线条颜色</span><br>    [[<span class="hljs-built_in">UIColor</span> redColor] setStroke];<br>    <br>    <span class="hljs-comment">// 设置线宽</span><br>    <span class="hljs-built_in">CGContextSetLineWidth</span>(context, <span class="hljs-number">2.0</span>);<br>    <br>    <span class="hljs-comment">// 绘制直线</span><br>    <span class="hljs-built_in">CGContextMoveToPoint</span>(context, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">CGContextAddLineToPoint</span>(context, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">CGContextStrokePath</span>(context);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-绘制基本图形"><a href="#2-2-绘制基本图形" class="headerlink" title="2.2 绘制基本图形"></a>2.2 绘制基本图形</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 绘制矩形</span><br><span class="hljs-built_in">CGContextAddRect</span>(context, <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br><br><span class="hljs-comment">// 绘制圆形</span><br><span class="hljs-built_in">CGContextAddEllipseInRect</span>(context, <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br><br><span class="hljs-comment">// 绘制圆角矩形</span><br><span class="hljs-built_in">CGFloat</span> radius = <span class="hljs-number">10.0</span>;<br><span class="hljs-built_in">CGContextAddRoundedRect</span>(context, <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>), radius);<br></code></pre></td></tr></table></figure><h3 id="2-3-渐变和阴影"><a href="#2-3-渐变和阴影" class="headerlink" title="2.3 渐变和阴影"></a>2.3 渐变和阴影</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 创建渐变</span><br><span class="hljs-built_in">CGGradientRef</span> gradient = <span class="hljs-built_in">CGGradientCreateWithColors</span>(<br>    <span class="hljs-built_in">CGColorSpaceCreateDeviceRGB</span>(),<br>    (__bridge <span class="hljs-built_in">CFArrayRef</span>)@[(<span class="hljs-type">id</span>)[<span class="hljs-built_in">UIColor</span> redColor].CGColor,<br>                          (<span class="hljs-type">id</span>)[<span class="hljs-built_in">UIColor</span> blueColor].CGColor],<br>    <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">// 绘制渐变</span><br><span class="hljs-built_in">CGContextDrawLinearGradient</span>(context,<br>    gradient,<br>    <span class="hljs-built_in">CGPointMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>    <span class="hljs-built_in">CGPointMake</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>),<br>    kCGGradientDrawsBeforeStartLocation);<br><br><span class="hljs-comment">// 添加阴影</span><br><span class="hljs-built_in">CGContextSetShadowWithColor</span>(context,<br>    <span class="hljs-built_in">CGSizeMake</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>    <span class="hljs-number">3.0</span>,<br>    [<span class="hljs-built_in">UIColor</span> blackColor].CGColor);<br></code></pre></td></tr></table></figure><h3 id="2-4-图片处理"><a href="#2-4-图片处理" class="headerlink" title="2.4 图片处理"></a>2.4 图片处理</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 绘制图片</span><br><span class="hljs-built_in">UIImage</span> *image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;example&quot;</span>];<br>[image drawInRect:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)];<br><br><span class="hljs-comment">// 图片裁剪</span><br><span class="hljs-built_in">CGContextClipToRect</span>(context, <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>));<br>[image drawAtPoint:<span class="hljs-built_in">CGPointZero</span>];<br></code></pre></td></tr></table></figure><h2 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h2><h3 id="3-1-Auto-Layout-性能优化"><a href="#3-1-Auto-Layout-性能优化" class="headerlink" title="3.1 Auto Layout 性能优化"></a>3.1 Auto Layout 性能优化</h3><ul><li>减少约束数量</li><li>避免复杂的约束关系</li><li>适时使用 <code>translatesAutoresizingMaskIntoConstraints = NO</code></li></ul><h3 id="3-2-Core-Graphics-性能优化"><a href="#3-2-Core-Graphics-性能优化" class="headerlink" title="3.2 Core Graphics 性能优化"></a>3.2 Core Graphics 性能优化</h3><ul><li>避免频繁重绘</li><li>使用 <code>drawRect:</code> 的替代方案</li><li>缓存绘制结果</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 使用 CALayer 优化</span><br>- (<span class="hljs-type">void</span>)optimizeDrawing &#123;<br>    <span class="hljs-built_in">CAShapeLayer</span> *shapeLayer = [<span class="hljs-built_in">CAShapeLayer</span> layer];<br>    <span class="hljs-built_in">UIBezierPath</span> *path = [<span class="hljs-built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="hljs-keyword">self</span>.bounds<br>                                                  cornerRadius:<span class="hljs-number">10</span>];<br>    shapeLayer.path = path.CGPath;<br>    shapeLayer.fillColor = [<span class="hljs-built_in">UIColor</span> redColor].CGColor;<br>    [<span class="hljs-keyword">self</span>.layer addSublayer:shapeLayer];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-实践案例"><a href="#4-实践案例" class="headerlink" title="4. 实践案例"></a>4. 实践案例</h2><h3 id="4-1-自适应卡片视图"><a href="#4-1-自适应卡片视图" class="headerlink" title="4.1 自适应卡片视图"></a>4.1 自适应卡片视图</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">CardView</span> : <span class="hljs-title">UIView</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *titleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIImageView</span> *imageView;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">CardView</span></span><br><br>- (<span class="hljs-keyword">instancetype</span>)initWithFrame:(<span class="hljs-built_in">CGRect</span>)frame &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span> = [<span class="hljs-variable language_">super</span> initWithFrame:frame]) &#123;<br>        [<span class="hljs-keyword">self</span> setupViews];<br>        [<span class="hljs-keyword">self</span> setupConstraints];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-type">void</span>)setupViews &#123;<br>    <span class="hljs-keyword">self</span>.titleLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.titleLabel.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>    [<span class="hljs-keyword">self</span> addSubview:<span class="hljs-keyword">self</span>.titleLabel];<br>    <br>    <span class="hljs-keyword">self</span>.imageView = [[<span class="hljs-built_in">UIImageView</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.imageView.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>    [<span class="hljs-keyword">self</span> addSubview:<span class="hljs-keyword">self</span>.imageView];<br>&#125;<br><br>- (<span class="hljs-type">void</span>)setupConstraints &#123;<br>    [<span class="hljs-built_in">NSLayoutConstraint</span> activateConstraints:@[<br>        [<span class="hljs-keyword">self</span>.titleLabel.topAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.topAnchor constant:<span class="hljs-number">8</span>],<br>        [<span class="hljs-keyword">self</span>.titleLabel.leadingAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.leadingAnchor constant:<span class="hljs-number">8</span>],<br>        [<span class="hljs-keyword">self</span>.titleLabel.trailingAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.trailingAnchor constant:<span class="hljs-number">-8</span>],<br>        <br>        [<span class="hljs-keyword">self</span>.imageView.topAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.titleLabel.bottomAnchor constant:<span class="hljs-number">8</span>],<br>        [<span class="hljs-keyword">self</span>.imageView.leadingAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.leadingAnchor],<br>        [<span class="hljs-keyword">self</span>.imageView.trailingAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.trailingAnchor],<br>        [<span class="hljs-keyword">self</span>.imageView.bottomAnchor constraintEqualToAnchor:<span class="hljs-keyword">self</span>.bottomAnchor]<br>    ]];<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h3 id="4-2-自定义绘制进度条"><a href="#4-2-自定义绘制进度条" class="headerlink" title="4.2 自定义绘制进度条"></a>4.2 自定义绘制进度条</h3><pre><code class="objc">@interface ProgressView : UIView@property (nonatomic, assign) CGFloat progress;@end@implementation ProgressView- (void)setProgress:(CGFloat)progress &#123;    _progress = progress;    [self setNeedsDisplay];&#125;- (void)drawRect:(CGRect)rect &#123;    CGContextRef context = UIGraphicsGetCurrentContext();        // 绘制背景    [[UIColor lightGrayColor] setFill];    CGContextFillRect(context, rect);        // 绘制进度    [[UIColor blueColor] setFill];    CGRect progressRect = CGRectMake(0, 0, rect.size.width * self.progress, rect.size.height);    CGContextFillRect(context, progressRect);        // 添加渐变效果    CGGradientRef gradient = CGGradientCreateWithColors(        CGColorSpaceCreateDeviceRGB(),        (__bridge CFArrayRef)@[(id)[UIColor colorWithWhite:1 alpha:0.2].CGColor,                              (id)[UIColor clearColor].CGColor],        NULL);        CGContextDrawLinearGradient(context,        gradient,        CGPointMake(0, 0),        CGPointMake(0, rect.size.height),        0);        CGGradientRelease(gradient);&#125;@end</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发分类</title>
    <link href="/2024/03/20/android-category/"/>
    <url>/2024/03/20/android-category/</url>
    
    <content type="html"><![CDATA[<p>主要包含以下技术专题：</p><ol><li>Kotlin&#x2F;Java 开发</li><li>Android 架构设计</li><li>性能优化</li><li>组件化实践</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 开发基础知识梳理</title>
    <link href="/2024/03/20/iOS-Base/"/>
    <url>/2024/03/20/iOS-Base/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-开发基础知识梳理"><a href="#iOS-开发基础知识梳理" class="headerlink" title="iOS 开发基础知识梳理"></a>iOS 开发基础知识梳理</h1><h2 id="1-Objective-C-语言基础"><a href="#1-Objective-C-语言基础" class="headerlink" title="1. Objective-C 语言基础"></a>1. Objective-C 语言基础</h2><h3 id="1-1-基本语法"><a href="#1-1-基本语法" class="headerlink" title="1.1 基本语法"></a>1.1 基本语法</h3><ul><li>头文件 (<code>.h</code>) 和 实现文件 (<code>.m</code>)</li><li>方法声明与实现：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Person</span> : <span class="hljs-title">NSObject</span></span><br>- (<span class="hljs-type">void</span>)sayHello;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Person</span></span><br>- (<span class="hljs-type">void</span>)sayHello &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Hello, World!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2-关键字"><a href="#1-2-关键字" class="headerlink" title="1.2 关键字"></a>1.2 关键字</h3><ul><li><code>@interface</code> &#x2F; <code>@implementation</code>：类的声明与实现  </li><li><code>@property</code> &#x2F; <code>@synthesize</code> &#x2F; <code>@dynamic</code>：属性声明、自动合成、动态合成  </li><li><code>self</code> &#x2F; <code>super</code>：指向自身、调用父类方法  </li><li><code>id</code> &#x2F; <code>instancetype</code>：通用对象类型，推荐 <code>instancetype</code> 作为返回值  </li><li><code>delegate</code> &#x2F; <code>protocol</code>：协议与代理模式</li></ul><h3 id="1-3-内存管理"><a href="#1-3-内存管理" class="headerlink" title="1.3 内存管理"></a>1.3 内存管理</h3><ul><li><strong>MRC（手动引用计数）</strong><ul><li><code>retain</code> &#x2F; <code>release</code> &#x2F; <code>autorelease</code></li></ul></li><li><strong>ARC（自动引用计数）</strong><ul><li><code>strong</code> &#x2F; <code>weak</code> &#x2F; <code>assign</code> &#x2F; <code>copy</code></li></ul></li><li><strong>循环引用问题</strong>（<code>weak</code> 修饰，解决 <code>retain cycle</code>）</li></ul><hr><h2 id="2-UIKit-和界面开发"><a href="#2-UIKit-和界面开发" class="headerlink" title="2. UIKit 和界面开发"></a>2. UIKit 和界面开发</h2><h3 id="2-1-UIView-与-UIViewController"><a href="#2-1-UIView-与-UIViewController" class="headerlink" title="2.1 UIView 与 UIViewController"></a>2.1 UIView 与 UIViewController</h3><ul><li><p><strong>视图控制器生命周期</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objc">- (<span class="hljs-type">void</span>)viewDidLoad;<br>- (<span class="hljs-type">void</span>)viewWillAppear:(<span class="hljs-type">BOOL</span>)animated;<br>- (<span class="hljs-type">void</span>)viewDidAppear:(<span class="hljs-type">BOOL</span>)animated;<br>- (<span class="hljs-type">void</span>)viewWillDisappear:(<span class="hljs-type">BOOL</span>)animated;<br>- (<span class="hljs-type">void</span>)viewDidDisappear:(<span class="hljs-type">BOOL</span>)animated;<br></code></pre></td></tr></table></figure></li><li><p><strong>手写 UI vs Storyboard</strong></p><ul><li><strong>代码方式</strong><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">UILabel</span> *label = [[<span class="hljs-built_in">UILabel</span> alloc] initWithFrame:<span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">200</span>, <span class="hljs-number">40</span>)];<br>label.text = <span class="hljs-string">@&quot;Hello&quot;</span>;<br>[<span class="hljs-keyword">self</span>.view addSubview:label];<br></code></pre></td></tr></table></figure></li><li><strong>Storyboard &#x2F; XIB</strong>（可视化拖拽，适合小团队开发）</li></ul></li></ul><h3 id="2-2-事件响应"><a href="#2-2-事件响应" class="headerlink" title="2.2 事件响应"></a>2.2 事件响应</h3><ul><li><strong>target-action 机制</strong><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objc">[button addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonTapped) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br></code></pre></td></tr></table></figure></li><li><strong>手势识别</strong><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">UITapGestureRecognizer</span> *tap = [[<span class="hljs-built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(viewTapped)];<br>[<span class="hljs-keyword">self</span>.view addGestureRecognizer:tap];<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="3-网络通信"><a href="#3-网络通信" class="headerlink" title="3. 网络通信"></a>3. 网络通信</h2><h3 id="3-1-NSURLSession"><a href="#3-1-NSURLSession" class="headerlink" title="3.1 NSURLSession"></a>3.1 NSURLSession</h3><ul><li><p><strong>GET 请求</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">NSURL</span> *url = [<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@&quot;https://api.github.com/lalaluya/data&quot;</span>];<br><span class="hljs-built_in">NSURLSessionDataTask</span> *task = [[<span class="hljs-built_in">NSURLSession</span> sharedSession] dataTaskWithURL:url completionHandler:^(<span class="hljs-built_in">NSData</span> *data, <span class="hljs-built_in">NSURLResponse</span> *response, <span class="hljs-built_in">NSError</span> *error) &#123;<br>    <span class="hljs-keyword">if</span> (data) &#123;<br>        <span class="hljs-built_in">NSDictionary</span> *json = [<span class="hljs-built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="hljs-number">0</span> error:<span class="hljs-literal">nil</span>];<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, json);<br>    &#125;<br>&#125;];<br>[task resume];<br></code></pre></td></tr></table></figure></li><li><p><strong>POST 请求</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">NSMutableURLRequest</span> *request = [<span class="hljs-built_in">NSMutableURLRequest</span> requestWithURL:[<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@&quot;https://api.github.com/lalaluya/login&quot;</span>]];<br>request.HTTPMethod = <span class="hljs-string">@&quot;POST&quot;</span>;<br>request.HTTPBody = [<span class="hljs-string">@&quot;username=admin&amp;password=123456&quot;</span> dataUsingEncoding:<span class="hljs-built_in">NSUTF8StringEncoding</span>];<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-JSON-解析"><a href="#3-2-JSON-解析" class="headerlink" title="3.2 JSON 解析"></a>3.2 JSON 解析</h3><ul><li><code>NSJSONSerialization</code> 解析 JSON：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">NSDictionary</span> *json = [<span class="hljs-built_in">NSJSONSerialization</span> JSONObjectWithData:data options:kNilOptions error:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="4-数据存储"><a href="#4-数据存储" class="headerlink" title="4. 数据存储"></a>4. 数据存储</h2><h3 id="4-1-NSUserDefaults（轻量级存储）"><a href="#4-1-NSUserDefaults（轻量级存储）" class="headerlink" title="4.1 NSUserDefaults（轻量级存储）"></a>4.1 NSUserDefaults（轻量级存储）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objc">[[<span class="hljs-built_in">NSUserDefaults</span> standardUserDefaults] setObject:<span class="hljs-string">@&quot;John&quot;</span> forKey:<span class="hljs-string">@&quot;username&quot;</span>];<br><span class="hljs-built_in">NSString</span> *name = [[<span class="hljs-built_in">NSUserDefaults</span> standardUserDefaults] stringForKey:<span class="hljs-string">@&quot;username&quot;</span>];<br></code></pre></td></tr></table></figure><h3 id="4-2-文件存储"><a href="#4-2-文件存储" class="headerlink" title="4.2 文件存储"></a>4.2 文件存储</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">NSString</span> *path = [<span class="hljs-built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="hljs-string">@&quot;Documents/test.txt&quot;</span>];<br>[<span class="hljs-string">@&quot;Hello, World!&quot;</span> writeToFile:path atomically:<span class="hljs-literal">YES</span> encoding:<span class="hljs-built_in">NSUTF8StringEncoding</span> error:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure><h3 id="4-3-CoreData"><a href="#4-3-CoreData" class="headerlink" title="4.3 CoreData"></a>4.3 CoreData</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-built_in">NSFetchRequest</span> *fetchRequest = [<span class="hljs-built_in">NSFetchRequest</span> fetchRequestWithEntityName:<span class="hljs-string">@&quot;Person&quot;</span>];<br><span class="hljs-built_in">NSArray</span> *result = [context executeFetchRequest:fetchRequest error:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure><hr><h2 id="5-调试与优化"><a href="#5-调试与优化" class="headerlink" title="5. 调试与优化"></a>5. 调试与优化</h2><h3 id="5-1-Xcode-调试"><a href="#5-1-Xcode-调试" class="headerlink" title="5.1 Xcode 调试"></a>5.1 Xcode 调试</h3><ul><li><strong>使用断点（breakpoint）</strong></li><li><code>po</code> 命令打印对象：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">(lldb) <span class="hljs-keyword">po</span> self.<span class="hljs-keyword">view</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-Instruments-性能分析"><a href="#5-2-Instruments-性能分析" class="headerlink" title="5.2 Instruments 性能分析"></a>5.2 Instruments 性能分析</h3><ul><li><strong>Leaks</strong> 监测内存泄漏</li><li><strong>Time Profiler</strong> 分析 CPU 性能</li><li><strong>Allocations</strong> 监测内存分配</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS性能优化实践指南</title>
    <link href="/2024/03/20/iOS-Performance-Optimization/"/>
    <url>/2024/03/20/iOS-Performance-Optimization/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS性能优化实践指南"><a href="#iOS性能优化实践指南" class="headerlink" title="iOS性能优化实践指南"></a>iOS性能优化实践指南</h1><p>在iOS开发过程中，性能优化是一个永恒的主题。本文将从内存优化、线程管理、卡顿处理等多个维度，分享一些实用的优化技巧和最佳实践。</p><h2 id="1-内存优化"><a href="#1-内存优化" class="headerlink" title="1. 内存优化"></a>1. 内存优化</h2><h3 id="1-1-内存泄漏防治"><a href="#1-1-内存泄漏防治" class="headerlink" title="1.1 内存泄漏防治"></a>1.1 内存泄漏防治</h3><ul><li>使用 Instruments 的 Leaks 工具定位泄漏</li><li>注意循环引用（retain cycle）<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 使用 weak-strong dance 模式</span><br>__<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf = <span class="hljs-keyword">self</span>;<br><span class="hljs-keyword">self</span>.completionBlock = ^&#123;<br>    __<span class="hljs-keyword">strong</span> <span class="hljs-keyword">typeof</span>(weakSelf) strongSelf = weakSelf;<br>    [strongSelf doSomething];<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>及时释放大对象和临时资源</li></ul><h3 id="1-2-内存占用优化"><a href="#1-2-内存占用优化" class="headerlink" title="1.2 内存占用优化"></a>1.2 内存占用优化</h3><ul><li>图片资源按需加载和缓存</li><li>使用 autorelease pool 管理临时对象<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">@autoreleasepool</span> &#123;<br>    <span class="hljs-comment">// 处理大量临时对象</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; largeNumber; i++) &#123;<br>        <span class="hljs-comment">// 创建临时对象的操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>避免大量数据常驻内存</li></ul><h2 id="2-线程管理"><a href="#2-线程管理" class="headerlink" title="2. 线程管理"></a>2. 线程管理</h2><h3 id="2-1-主线程优化"><a href="#2-1-主线程优化" class="headerlink" title="2.1 主线程优化"></a>2.1 主线程优化</h3><ul><li>避免主线程执行耗时操作</li><li>使用 GCD 异步处理<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.global().async &#123;<br>    <span class="hljs-comment">// 耗时操作</span><br>    <span class="hljs-type">DispatchQueue</span>.main.async &#123;<br>        <span class="hljs-comment">// UI 更新</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-线程池管理"><a href="#2-2-线程池管理" class="headerlink" title="2.2 线程池管理"></a>2.2 线程池管理</h3><ul><li>合理使用 NSOperationQueue</li><li>控制并发线程数量<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> queue <span class="hljs-operator">=</span> <span class="hljs-type">OperationQueue</span>()<br>queue.maxConcurrentOperationCount <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-卡顿优化"><a href="#3-卡顿优化" class="headerlink" title="3. 卡顿优化"></a>3. 卡顿优化</h2><h3 id="3-1-UI-渲染优化"><a href="#3-1-UI-渲染优化" class="headerlink" title="3.1 UI 渲染优化"></a>3.1 UI 渲染优化</h3><ul><li>避免主线程大量计算</li><li>使用图层预渲染<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">layer.shouldRasterize <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>layer.rasterizationScale <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.scale<br></code></pre></td></tr></table></figure></li><li>控制图层数量和层级</li></ul><h3 id="3-2-TableView-CollectionView-优化"><a href="#3-2-TableView-CollectionView-优化" class="headerlink" title="3.2 TableView&#x2F;CollectionView 优化"></a>3.2 TableView&#x2F;CollectionView 优化</h3><ul><li>cell 重用机制</li><li>预排版提前计算<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 提前计算并缓存 cell 高度</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">tableView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">tableView</span>: <span class="hljs-type">UITableView</span>, <span class="hljs-params">heightForRowAt</span> <span class="hljs-params">indexPath</span>: <span class="hljs-type">IndexPath</span>) -&gt; <span class="hljs-type">CGFloat</span> &#123;<br>    <span class="hljs-keyword">return</span> cellHeightCache[indexPath] <span class="hljs-operator">??</span> <span class="hljs-type">UITableView</span>.automaticDimension<br>&#125;<br></code></pre></td></tr></table></figure></li><li>异步绘制和图片解码</li></ul><h2 id="4-启动优化"><a href="#4-启动优化" class="headerlink" title="4. 启动优化"></a>4. 启动优化</h2><h3 id="4-1-冷启动优化"><a href="#4-1-冷启动优化" class="headerlink" title="4.1 冷启动优化"></a>4.1 冷启动优化</h3><ul><li>减少启动时加载的库</li><li>延迟加载不必要的资源</li><li>+load 方法优化</li></ul><h3 id="4-2-二进制优化"><a href="#4-2-二进制优化" class="headerlink" title="4.2 二进制优化"></a>4.2 二进制优化</h3><ul><li>移除未使用的代码和资源</li><li>编译器优化</li><li>LinkMap 分析</li></ul><h2 id="5-工具和监控"><a href="#5-工具和监控" class="headerlink" title="5. 工具和监控"></a>5. 工具和监控</h2><h3 id="5-1-性能监控"><a href="#5-1-性能监控" class="headerlink" title="5.1 性能监控"></a>5.1 性能监控</h3><ul><li>FPS 监控<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FPSMonitor</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> displayLink: <span class="hljs-type">CADisplayLink</span>?<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">start</span>() &#123;<br>        displayLink <span class="hljs-operator">=</span> <span class="hljs-type">CADisplayLink</span>(target: <span class="hljs-keyword">self</span>, selector: <span class="hljs-keyword">#selector</span>(tick))<br>        displayLink<span class="hljs-operator">?</span>.add(to: .main, forMode: .common)<br>    &#125;<br>    <br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">tick</span>() &#123;<br>        <span class="hljs-comment">// 计算和记录 FPS</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>内存监控</li><li>CPU 使用率监控</li></ul><h3 id="5-2-调试工具"><a href="#5-2-调试工具" class="headerlink" title="5.2 调试工具"></a>5.2 调试工具</h3><ul><li>Instruments 使用<ul><li>Time Profiler</li><li>Allocations</li><li>Leaks</li></ul></li><li>Xcode Memory Graph</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>性能优化是一个持续的过程，需要在开发过程中不断积累经验和最佳实践。通过合理使用工具、采用正确的优化策略，可以显著提升应用的性能和用户体验。在优化过程中，要注意：</p><ol><li>先监控和分析，找到真正的性能瓶颈</li><li>制定合理的优化方案，避免过度优化</li><li>建立性能监控体系，及时发现问题</li><li>在开发过程中养成良好的性能意识</li></ol><p>持续的性能优化不仅能提升用户体验，也能帮助我们构建更稳定、高效的应用。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎来到咔咔咔迪斯科的博客</title>
    <link href="/2024/03/20/index/"/>
    <url>/2024/03/20/index/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>大家好，我是咔咔咔迪斯科，一名热爱技术的开发者。这个博客将会分享我在技术学习和生活中的所思所想。</p><h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><p>在这里，你可以找到：</p><ul><li>技术文章和教程</li><li>学习心得分享</li><li>个人项目展示</li><li>生活随笔</li></ul><h2 id="最近更新"><a href="#最近更新" class="headerlink" title="最近更新"></a>最近更新</h2><ol><li><a href="/ios-category">iOS Category 详解</a></li><li><a href="/ios-base">iOS 开发基础知识梳理</a></li><li>[更多文章持续更新中…]</li></ol><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>GitHub：[<a href="https://github.com/lalaluya]">https://github.com/lalaluya]</a></li><li>Email：[<a href="mailto:&#98;&#x74;&#56;&#x35;&#48;&#52;&#x39;&#53;&#x32;&#x32;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#98;&#x74;&#56;&#x35;&#48;&#52;&#x39;&#53;&#x32;&#x32;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a>]</li></ul><p>欢迎交流与讨论！</p>]]></content>
    
    
    <categories>
      
      <category>个人介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发分类</title>
    <link href="/2024/03/20/ios-category/"/>
    <url>/2024/03/20/ios-category/</url>
    
    <content type="html"><![CDATA[<p>主要包含以下技术专题：</p><ol><li>Swift&#x2F;Objective-C 开发</li><li>iOS 架构设计</li><li>性能优化</li><li>组件化实践</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
